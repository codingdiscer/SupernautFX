buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctorj:${asciidoctorjVersion}"
        //classpath "org.asciidoctor:asciidoctorj-diagram:${asciidoctorjDiagramVersion}"
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert'        version '2.2.0'
    id 'com.jfrog.bintray'                  version '1.8.4'
    id 'org.openjfx.javafxplugin'           version '0.0.9'  apply false
    id 'org.beryx.jlink'                    version '2.22.1' apply false
    id 'de.undercouch.download'             version '4.0.1'
    id 'com.github.hierynomus.license'      version '0.15.0' apply false
}

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

rootProject.ext.signJPackageImages = signJPackageImages == "true" // create boolean in ext from property string
logger.warn "rootProject.ext.signJPackageImages = ${rootProject.ext.signJPackageImages}"

allprojects {
    apply plugin: 'java'

    version = supernautVersion     // set in gradle.properties
    group = 'app.supernaut'

    repositories {
        jcenter()
    }

    java {
        toolchain {
            // A full build requires JDK 15 for the (incubating) `jpackage` tool
            // When JDK 16 is final, we will upgrade to JDK 16 for a non-incubating `jpackage`
            languageVersion = JavaLanguageVersion.of(16)
        }
    }
}

subprojects {
    apply plugin: 'groovy'

    dependencies {
        testImplementation "org.codehaus.groovy:groovy:${groovyVersion}:"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }

        testRuntimeOnly "net.bytebuddy:byte-buddy:1.10.9"                 // allows Spock to mock classes (in addition to interfaces)
        testRuntimeOnly "org.objenesis:objenesis:3.1"                     // Allow Spock to mock classes with constructor arguments
        testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"           // Runtime implementation of slf4j
    }

    compileJava {
        options.release = 11
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
        // FOR JDK 16
        options.forkOptions.jvmArgs.addAll( ['--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'] )
    }

    test {
        useJUnitPlatform()          // We're using Spock 2.0 and JUnit 5
    }
}

apply from: 'gradle/bintray.gradle'
apply from: 'gradle/downloadJPackage.gradle'
apply from: 'gradle/licenseCheck.gradle'

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

build.dependsOn subprojects.build

task buildCI(dependsOn: [build, testReport,
                         'supernaut-fx-sample-hello:jlink', 'supernaut-fx-sample-minimal:jlink', 'supernaut-fx-testapp:jlink'])

task buildJPackages(dependsOn: [buildCI,
                        'supernaut-fx-sample-hello:jpackage', 'supernaut-fx-sample-minimal:jpackage', 'supernaut-fx-testapp:jpackage'])


// Use the Gradle default Java Toolchain to find the JDK Home for the JLink Plugin
String findDefaultToolchainJavaHome() {
    def defaultToolchain = project.getExtensions().getByType(JavaPluginExtension.class).toolchain
    JavaToolchainService service = project.getExtensions().getByType(JavaToolchainService.class)
    return service.launcherFor(defaultToolchain).get().metadata.installationPath.asFile.absolutePath
}

/**
 * Massage the version string based upon the current OS to be valid
 * for the installer platforms for that OS. rpmbuild, MSI, and potentially
 * others have restrictions on valid version strings.
 *
 * @param appVersion A typical Gradle version string
 * @return a version string that should work for the currrent platform
 */
String normalizeAppVersion(final String appVersion) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.linux) {
        // Replace '-' with '.' for rpmbuild
        return appVersion.replace('-', '.')
    } else if (os.windows) {
        // This is a hack attempt to assure the version conforms to MSI productVersion string rules
        // See https://docs.microsoft.com/en-us/windows/win32/msi/productversion
        // For now, we'll just remove '-SNAPSHOT' if present.
        return appVersion.replaceAll('-SNAPSHOT$', '')
    } else {
        return appVersion.replaceAll('-SNAPSHOT$', '')
    }
}
